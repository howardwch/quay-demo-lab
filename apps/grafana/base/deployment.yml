apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
    app.kubernetes.io/component: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Monitoring-Stack
  name: grafana
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: grafana
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "True"
        grafana.io/scrape: "True"
        grafana.io/port: "3000"
        grafana.io/scheme: "http"
      labels:
        app: grafana
        deployment: grafana
        version: v1
    spec:
      containers:
      - resources:
          limits:
            memory: 128Mi
            cpu: 75m
          requests:
            cpu: 50m
            memory: 32Mi
        readinessProbe:
          httpGet:
            path: /healthz
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 3
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /healthz
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 3
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /healthz
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 3
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
        image: localhost/grafana:latest
        imagePullPolicy: IfNotPresent
        name: grafana
        ports:
        - containerPort: 3000
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/grafana/provisioning
          name: provisioning
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: provisioning
          items:
          - key: prometheus.yml
            path: datasources/prometheus.yml
          - key: dashboards.yml
            path: dashboards/dashboards.yml
          - key: quay-monitoring.json
            path: dashboards/quay-monitoring.json
        name: provisioning
